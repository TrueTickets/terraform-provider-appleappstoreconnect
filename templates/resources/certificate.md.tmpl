---
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})

{{ .Description | trimspace }}

Certificates are used to sign Apple Wallet passes and enable features like NFC. Different certificate types provide different capabilities.

**Note**: Both `certificate_content` (DER format) and `certificate_content_pem` (PEM format) are returned as base64 encoded strings. Use Terraform's `base64decode()` function to decode them before saving to files.

## Example Usage

### Basic Pass Certificate

```hcl
resource "appleappstoreconnect_pass_type_id" "example" {
  identifier  = "pass.io.truetickets.test.membership"
  description = "Example Pass"
}

resource "appleappstoreconnect_certificate" "example" {
  certificate_type = "PASS_TYPE_ID"
  csr_content     = file("example.csr")

  relationships {
    pass_type_id = appleappstoreconnect_pass_type_id.example.id
  }
}

output "certificate_info" {
  value = {
    serial_number = appleappstoreconnect_certificate.example.serial_number
    expires       = appleappstoreconnect_certificate.example.expiration_date
  }
}
```

### NFC-Enabled Certificate

```hcl
resource "appleappstoreconnect_pass_type_id" "nfc_pass" {
  identifier  = "pass.io.truetickets.test.nfc"
  description = "NFC-Enabled Pass"
}

resource "appleappstoreconnect_certificate" "nfc_cert" {
  certificate_type = "PASS_TYPE_ID_WITH_NFC"
  csr_content     = file("nfc_pass.csr")

  relationships {
    pass_type_id = appleappstoreconnect_pass_type_id.nfc_pass.id
  }
}
```

### Save Certificate to File

```hcl
resource "appleappstoreconnect_certificate" "example" {
  certificate_type = "PASS_TYPE_ID"
  csr_content     = file("example.csr")

  relationships {
    pass_type_id = appleappstoreconnect_pass_type_id.example.id
  }
}

# Save certificate in PEM format
resource "local_file" "certificate_pem" {
  content  = base64decode(appleappstoreconnect_certificate.example.certificate_content_pem)
  filename = "certificate.pem"
}

# Save certificate in DER format
resource "local_file" "certificate_der" {
  content  = base64decode(appleappstoreconnect_certificate.example.certificate_content)
  filename = "certificate.der"
}
```

{{ .SchemaMarkdown | trimspace }}

## Certificate Types

The following certificate types are supported:

- `PASS_TYPE_ID` - Standard Pass Type ID certificate
- `PASS_TYPE_ID_WITH_NFC` - Pass Type ID certificate with NFC capabilities
- `IOS_DEVELOPMENT` - iOS development certificate
- `IOS_DISTRIBUTION` - iOS distribution certificate
- `MAC_APP_DEVELOPMENT` - Mac app development certificate
- `MAC_APP_DISTRIBUTION` - Mac app distribution certificate
- `MAC_INSTALLER_DISTRIBUTION` - Mac installer distribution certificate
- `DEVELOPER_ID_KEXT` - Developer ID Kernel Extension certificate
- `DEVELOPER_ID_APPLICATION` - Developer ID Application certificate
- `DEVELOPMENT_PUSH_SSL` - Development push SSL certificate
- `PRODUCTION_PUSH_SSL` - Production push SSL certificate
- `PUSH_SSL` - Push SSL certificate

## Import

Certificates can be imported using their ID:

```bash
terraform import appleappstoreconnect_certificate.example YYYYYYYYYY
```

Where `YYYYYYYYYY` is the Certificate ID from App Store Connect.
